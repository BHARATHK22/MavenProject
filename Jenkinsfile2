pipeline {
    agent any
    environment{
        NEW_VERSION='1.3.0' 
        def readTestCases ="E:\\eclipse-workspace\\MavenProject\\InputFiles\\"
        def testCase=""
        def scriptDir = "getClass().protectionDomain.codeSource.location.path"
        //def path = "${WORKSPACE}"
        
    }
    triggers {
       // poll repo every 2 minute for changes
       //pollSCM('*/2 * * * *')
       // will trigger build at 10:00 PM every day
       pollSCM('H 22 * * *')
      } 
    stages {
    
    	stage('MVN exec:java') {
            steps {
                //sh "mvn exec:java"
		sh "$job"
            }
        }
        stage('BAT Exe') {
  			steps {
      			bat "mvnBatFile.bat"
      			//bat file execution
      		}	
		}
        stage('MVN test') {
            steps {
                sh "mvn test"
            }
        }
    	stage('REPORT Zip') {
            steps{
               bat "del TEST_RESULT.zip"
               zip zipFile: 'TEST_RESULT.zip', archive: false, dir: "${WORKSPACE}/Report/TEST_REPORT"
            }
        }   
     } 
     post {
        
        failure {
        	 		mail to: 'bharathkalapakuri@gmail.com',
             		subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
             		body: "Something is wrong with ${env.BUILD_URL}"
    			}
    	success {
    				
        	 		emailext attachmentsPattern: 'TEST_RESULT.zip', body: readFile("${WORKSPACE}\\Report\\TEST_REPORT\\TEST_RESULT_testRunner.html"),
                    subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Successful", 
                    mimeType: 'text/html', to: "bharathkalapakuri@gmail.com"	
    		  }	
    }  	
}
