<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="2" passed="0" failed="1" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-04-15T13:55:52 IST" name="Suite" finished-at="2021-04-15T13:55:55 IST" duration-ms="2909">
    <groups>
    </groups>
    <test started-at="2021-04-15T13:55:52 IST" name="Test" finished-at="2021-04-15T13:55:55 IST" duration-ms="2909">
      <class name="com.test.mavenProject.MavenProject.AppTest">
        <test-method signature="shouldAnswerWithFalse()[pri:0, instance:com.test.mavenProject.MavenProject.AppTest@223aa2f7]" started-at="2021-04-15T13:55:52 IST" name="shouldAnswerWithFalse" finished-at="2021-04-15T13:55:52 IST" duration-ms="29" status="FAIL">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError
at com.test.mavenProject.MavenProject.AppTest.shouldAnswerWithFalse(AppTest.java:49)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAnswerWithFalse -->
        <test-method is-config="true" signature="jiraTest(org.testng.ITestResult)[pri:0, instance:com.test.mavenProject.MavenProject.AppTest@223aa2f7]" started-at="2021-04-15T13:55:52 IST" name="jiraTest" finished-at="2021-04-15T13:55:55 IST" duration-ms="2806" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=shouldAnswerWithFalse status=FAILURE method=AppTest.shouldAnswerWithFalse()[pri:0, instance:com.test.mavenProject.MavenProject.AppTest@223aa2f7] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="org.catools.common.config.CConfigNotDefinedException">
            <message>
              <![CDATA[Configuration is not defined: ZAPI_HOME
To work with configuration you need to defined it first.
We need all configuration parameters so we can use this information while you are using application in cli mode.
To do so you need to add this information to your default yaml file in following format:
- name: "String: <Configuration Name>"
  descriptions: "String: <Command line prompt to inform use about the propose of config if the value is not set>"
  defaultValue: "String: <Default value so we can use it if value is not set, note that we do not prompt user if default value set>"
  required: <Boolean: Shall we prompt user for this config if it is not set or we can ignore this>
  sensitive: <Boolean: if the configuration information is sensitive and should mask in log>
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.catools.common.config.CConfigNotDefinedException: Configuration is not defined: ZAPI_HOME
To work with configuration you need to defined it first.
We need all configuration parameters so we can use this information while you are using application in cli mode.
To do so you need to add this information to your default yaml file in following format:
- name: "String: <Configuration Name>"
  descriptions: "String: <Command line prompt to inform use about the propose of config if the value is not set>"
  defaultValue: "String: <Default value so we can use it if value is not set, note that we do not prompt user if default value set>"
  required: <Boolean: Shall we prompt user for this config if it is not set or we can ignore this>
  sensitive: <Boolean: if the configuration information is sensitive and should mask in log>

at org.catools.common.config.CConfigInfoCollection.lambda$getByName$1(CConfigInfoCollection.java:21)
at org.catools.common.collections.interfaces.CIterable.getFirstOrThrow(CIterable.java:254)
at org.catools.common.config.CConfigInfoCollection.getByName(CConfigInfoCollection.java:20)
at org.catools.common.config.CConfigInfoCollection.getByName(CConfigInfoCollection.java:16)
at org.catools.common.config.CConfigInfoCollection.getString(CConfigInfoCollection.java:68)
at org.catools.zapi.configs.CZApiConfigs$ZApi.getZApiUri(CZApiConfigs.java:12)
at org.catools.zapi.rest.CZApiRestClient.get(CZApiRestClient.java:19)
at org.catools.zapi.rest.util.CZApiProjectClient.getProjects(CZApiProjectClient.java:15)
at org.catools.zapi.rest.cycle.CZApiCycleClient.getCycleById(CZApiCycleClient.java:39)
at com.test.mavenProject.MavenProject.AppTest.jiraTest(AppTest.java:67)
]]>
            </full-stacktrace>
          </exception> <!-- org.catools.common.config.CConfigNotDefinedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jiraTest -->
        <test-method signature="shouldAnswerWithTrue()[pri:0, instance:com.test.mavenProject.MavenProject.AppTest@223aa2f7]" started-at="2021-04-15T13:55:55 IST" name="shouldAnswerWithTrue" finished-at="2021-04-15T13:55:55 IST" duration-ms="0" status="SKIP">
          <exception class="org.catools.common.config.CConfigNotDefinedException">
            <message>
              <![CDATA[Configuration is not defined: ZAPI_HOME
To work with configuration you need to defined it first.
We need all configuration parameters so we can use this information while you are using application in cli mode.
To do so you need to add this information to your default yaml file in following format:
- name: "String: <Configuration Name>"
  descriptions: "String: <Command line prompt to inform use about the propose of config if the value is not set>"
  defaultValue: "String: <Default value so we can use it if value is not set, note that we do not prompt user if default value set>"
  required: <Boolean: Shall we prompt user for this config if it is not set or we can ignore this>
  sensitive: <Boolean: if the configuration information is sensitive and should mask in log>
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.catools.common.config.CConfigNotDefinedException: Configuration is not defined: ZAPI_HOME
To work with configuration you need to defined it first.
We need all configuration parameters so we can use this information while you are using application in cli mode.
To do so you need to add this information to your default yaml file in following format:
- name: "String: <Configuration Name>"
  descriptions: "String: <Command line prompt to inform use about the propose of config if the value is not set>"
  defaultValue: "String: <Default value so we can use it if value is not set, note that we do not prompt user if default value set>"
  required: <Boolean: Shall we prompt user for this config if it is not set or we can ignore this>
  sensitive: <Boolean: if the configuration information is sensitive and should mask in log>

at org.catools.common.config.CConfigInfoCollection.lambda$getByName$1(CConfigInfoCollection.java:21)
at org.catools.common.collections.interfaces.CIterable.getFirstOrThrow(CIterable.java:254)
at org.catools.common.config.CConfigInfoCollection.getByName(CConfigInfoCollection.java:20)
at org.catools.common.config.CConfigInfoCollection.getByName(CConfigInfoCollection.java:16)
at org.catools.common.config.CConfigInfoCollection.getString(CConfigInfoCollection.java:68)
at org.catools.zapi.configs.CZApiConfigs$ZApi.getZApiUri(CZApiConfigs.java:12)
at org.catools.zapi.rest.CZApiRestClient.get(CZApiRestClient.java:19)
at org.catools.zapi.rest.util.CZApiProjectClient.getProjects(CZApiProjectClient.java:15)
at org.catools.zapi.rest.cycle.CZApiCycleClient.getCycleById(CZApiCycleClient.java:39)
at com.test.mavenProject.MavenProject.AppTest.jiraTest(AppTest.java:67)
]]>
            </full-stacktrace>
          </exception> <!-- org.catools.common.config.CConfigNotDefinedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAnswerWithTrue -->
        <test-method is-config="true" signature="jiraTest(org.testng.ITestResult)[pri:0, instance:com.test.mavenProject.MavenProject.AppTest@223aa2f7]" started-at="2021-04-15T13:55:55 IST" name="jiraTest" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1618475155754" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- jiraTest -->
      </class> <!-- com.test.mavenProject.MavenProject.AppTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
